
Setor --> Departament

structure/DataResult:           "message": String, "data": T[]
         /ArrayMessageResult:   "messages": String[]
         /SimpleMessageResult:  "message": String

    essas interfaces serao utilizadas como forma de return para o frontend,
    todas contendo duas opção: 
    OK: se tudo der certo.
        DataResult: retorna uma mensagem e objeto de qualquer tipo para o front(exemplo: em um get userId, ele retorna um User encontrado).
        ArrayMessageResult: retorna um array de mensagens.
        SimpleMessageResult: retorna apenas uma mensagem.

    Todos os return de erro não iguais.
    Error: Caso algo de errado vc retorna passan o errorcode (401, 403) e a mensagem do erro.

    Exemplo de uso:

        DataResult<Department> GetAll();
            // Nesse caso, o método Get retorna um DataResult. Todas essas interfaces de "result" retornam ou um .Ok<>, ou um .Error<>.
            // Se o retorno for um .Ok<>, podemos acessar uma List<Departament> dentro dele.
        
        Podemos verificar o resultado com o uso de um switch:

            boolean wasFetchSuccessful;
            List<Department> fetchedDepartments;

            switch (result) {
                case DataResult.Ok<Department> r -> {
                    wasFetchSuccessful = true;
                    fetchedDepartments = r.data();
                }
                
                case DataResult.Error<Department> error -> {
                    wasFetchSuccessful = false;
                    fetchedDepartments = null;
                }
            };

        Nesse código, quando o resultado da operação for um Ok, pegamos os dados normalmente o uso do r.data().
        Também podemos pegar mensagens de erro e status code quanto for um erro, usando error.errorCode() e error.message().

model/BaseModel:
    essa model vai ser utilizada como base para todas as models, ela cria as colunas
    id, data de criação(createdAt), data de atualização(updatedAt), dessa forma não sera necessario
    implementas essas colunas na nova model.
    exemplo de implementação:
        public class User extends BaseModel {...}


Todos os services retonaram dados com os tipos base(User, Service, Departament),
recomendamos que antes de passar para o frontend seja realizado a conversção desses dados para
o seu tipo DTO no controller, exemplo: User --> UserDTO, Departament --> DepartamentDTO etc.
